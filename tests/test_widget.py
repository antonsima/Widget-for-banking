from math import nan

import pytest

from src.widget import get_date, mask_account_card


@pytest.mark.parametrize("type_and_requisites, expected",
                         [('Visa Platinum 7000792289606361', 'Visa Platinum 7000 79** **** 6361'),
                          ('Счет 73654108430135874305', 'Счет **4305'),
                          ('И не счет и не карта 73654108430135874305', 'И не счет и не карта 7365 41** **** **** 4305'),
                          ('Безномера', 'Введите корректные данные (кажется, чего-то не хватает)'),
                          ('Счет', 'Введите корректные данные (кажется, чего-то не хватает)'),
                          ('Счет 234243d', 'Номер счета или карты должен состоять из цифр'),
                          ('Слово 234243d', 'Номер счета или карты должен состоять из цифр'),
                          ('Visa Platinum 700079228960636', 'Номер карты должен состоять из 16 цифр и более'),
                          ('Счет 7365410', 'Номер счета должен содержать больше 7 цифр'),
                          (nan, 'Реквизиты не найдены')])
def test_mask_account_card(type_and_requisites, expected):
    assert mask_account_card(type_and_requisites) == expected


@pytest.mark.parametrize("date_and_time, expected",
                         [('2024-03-11T02:26:18.671407', '11.03.2024'),
                          ('2024-03-1102:26:18.671407', '11.03.2024'),
                          ('2024-03-11', '11.03.2024'),
                          ('02:26:18.671407', 'Введите корректный формат даты'),
                          ('2024-03-1', 'Введите корректный формат даты'),
                          ('998-003-11', 'Введите корректный формат даты'),
                          ('2024-11', 'Введите корректный формат даты'),
                          ('2024-03-1T', 'В дате должны содержаться только цифры'),
                          ('2024', 'Введите корректный формат даты')])
def test_get_date(date_and_time, expected):
    assert get_date(date_and_time) == expected
